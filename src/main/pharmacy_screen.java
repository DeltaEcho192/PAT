/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package main;

import java.awt.Color;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author admin
 */
public class pharmacy_screen extends javax.swing.JFrame {

    /**
     * Creates new form pharmacy_screen
     */
    public pharmacy_screen() {
        initComponents();
        this.getContentPane().setBackground(Color.white);
        refresh();
    }
    
    public int x = 0;
    public int z = -1;
    public ResultSet resultSet = null;
    main M = new main();

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pharmacyL = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        pharmacyTable = new javax.swing.JTable();
        nameL = new javax.swing.JLabel();
        descriptionL = new javax.swing.JLabel();
        sellL = new javax.swing.JLabel();
        stockPriceL = new javax.swing.JLabel();
        soldL = new javax.swing.JLabel();
        itemNameT = new javax.swing.JTextField();
        itemDescT = new javax.swing.JTextField();
        sellPriceT = new javax.swing.JTextField();
        stockPriceT = new javax.swing.JTextField();
        itemSoldT = new javax.swing.JTextField();
        firstB = new javax.swing.JButton();
        lastB = new javax.swing.JButton();
        upB = new javax.swing.JButton();
        downB = new javax.swing.JButton();
        refreshB = new javax.swing.JButton();
        helpB = new javax.swing.JButton();
        toStringB = new javax.swing.JButton();
        backB = new javax.swing.JButton();
        nStockB = new javax.swing.JButton();
        eStockB = new javax.swing.JButton();
        dStockB = new javax.swing.JButton();
        inventoryL = new javax.swing.JLabel();
        itemInvT = new javax.swing.JTextField();
        titleL = new javax.swing.JLabel();
        subTitleL = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setPreferredSize(new java.awt.Dimension(1120, 720));

        pharmacyL.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        pharmacyL.setText("Pharmacy");

        pharmacyTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "itemID", "ItemName", "ItemDescription", "ItemSellPrice", "ItemStockPrice", "ItemInvetory", "ItemSold"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.Integer.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane1.setViewportView(pharmacyTable);

        nameL.setText("Item Name");

        descriptionL.setText("Item Description");

        sellL.setText("Item Selling price");

        stockPriceL.setText("Item stocking price");

        soldL.setText("Items sold");

        firstB.setText("<<");
        firstB.setPreferredSize(new java.awt.Dimension(50, 23));
        firstB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                firstBActionPerformed(evt);
            }
        });

        lastB.setText(">>");
        lastB.setPreferredSize(new java.awt.Dimension(50, 23));
        lastB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lastBActionPerformed(evt);
            }
        });

        upB.setText("<");
        upB.setPreferredSize(new java.awt.Dimension(50, 23));
        upB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                upBActionPerformed(evt);
            }
        });

        downB.setText(">");
        downB.setPreferredSize(new java.awt.Dimension(50, 23));
        downB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                downBActionPerformed(evt);
            }
        });

        refreshB.setText("Refresh");
        refreshB.setPreferredSize(new java.awt.Dimension(80, 23));
        refreshB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshBActionPerformed(evt);
            }
        });

        helpB.setText("Help");
        helpB.setPreferredSize(new java.awt.Dimension(80, 23));
        helpB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                helpBActionPerformed(evt);
            }
        });

        toStringB.setText("Print financial statement");
        toStringB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                toStringBActionPerformed(evt);
            }
        });

        backB.setText("Back");
        backB.setPreferredSize(new java.awt.Dimension(80, 23));
        backB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backBActionPerformed(evt);
            }
        });

        nStockB.setText("New Stock");
        nStockB.setPreferredSize(new java.awt.Dimension(100, 23));
        nStockB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nStockBActionPerformed(evt);
            }
        });

        eStockB.setText("Edit Stock");
        eStockB.setPreferredSize(new java.awt.Dimension(100, 23));
        eStockB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                eStockBActionPerformed(evt);
            }
        });

        dStockB.setText("Delete Stock");
        dStockB.setPreferredSize(new java.awt.Dimension(100, 23));
        dStockB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dStockBActionPerformed(evt);
            }
        });

        inventoryL.setText("Item Inventory");

        titleL.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        titleL.setText("St John's Hospital");

        subTitleL.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        subTitleL.setText("Administavtive Program");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(pharmacyL)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(titleL)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(31, 31, 31)
                                .addComponent(subTitleL)))
                        .addGap(346, 346, 346))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1)
                        .addContainerGap())))
            .addGroup(layout.createSequentialGroup()
                .addGap(67, 67, 67)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGap(80, 80, 80)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(stockPriceL)
                            .addComponent(sellL)
                            .addComponent(descriptionL)
                            .addComponent(nameL)
                            .addComponent(inventoryL)
                            .addComponent(soldL))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(itemNameT, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(itemDescT, javax.swing.GroupLayout.PREFERRED_SIZE, 215, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                        .addComponent(stockPriceT, javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(sellPriceT, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 496, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(firstB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(upB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(26, 26, 26)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lastB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(downB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(itemSoldT, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(itemInvT, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(toStringB)
                                        .addComponent(helpB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(refreshB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(69, 69, 69)
                                        .addComponent(backB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                        .addGap(86, 86, 86))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(nStockB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(55, 55, 55)
                        .addComponent(eStockB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(57, 57, 57)
                        .addComponent(dStockB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(titleL)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(pharmacyL)
                    .addComponent(subTitleL))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 210, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(refreshB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(helpB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(nameL)
                            .addComponent(itemNameT, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(firstB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lastB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(descriptionL)
                            .addComponent(itemDescT, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(upB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(downB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(sellL)
                            .addComponent(sellPriceT, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(stockPriceL)
                            .addComponent(stockPriceT, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(inventoryL)
                            .addComponent(itemInvT, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(soldL)
                            .addComponent(itemSoldT, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(18, 18, 18)
                .addComponent(toStringB)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(backB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(nStockB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(eStockB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(dStockB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(50, 50, 50))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void gotoRow(int row)
    {
        pharmacyTable.setRowSelectionInterval(row, row);
        pharmacyTable.scrollRectToVisible(pharmacyTable.getCellRect(row, 0, true));
        
    }
    
    private void refresh()
    {
        //x is public and used to track how many rows are in the table. Allows last row select to work
        x = 0;
        

        try {
            x = x + 1; 
            //Defines column names
            String[] columnNames = {"itemID","ItemName","itemDescription","itemSellPrice","itemStockPrice","itemInvent","itemSold"};
            DefaultTableModel model = new DefaultTableModel();
            model.setColumnIdentifiers(columnNames);
            pharmacyTable.setModel(model);

            String query = "SELECT * FROM tblPharm";
            resultSet = M.refresh(query);
            //Gets resultSet then loops through it and add all the relevent information to
            //the table row by row
            while(resultSet.next()) {
                int itemID = resultSet.getInt(1);
                String itemName = resultSet.getString(3);
                String itemDescription = resultSet.getString(2);
                Double SellPrice = resultSet.getDouble(4);
                Double StockPrice = resultSet.getDouble(5);
                int itemInvent = resultSet.getInt(6);
                int itemSold = resultSet.getInt(7);

                    
                x = x + 1;
                model.addRow(new Object[] {itemID,itemName,itemDescription,SellPrice,StockPrice,itemInvent,itemSold});
            }
              
                    
        }
        catch(SQLException sqlex){
            sqlex.printStackTrace();
        }
        finally {
            try {
                resultSet.close();
            }
            catch (SQLException sqlex) {
                sqlex.printStackTrace();
            }
        }
    }
    private void upBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_upBActionPerformed
        if(z > 0)
        {
            gotoRow(z-1);
            z = z - 1;
        }
    }//GEN-LAST:event_upBActionPerformed

    private void eStockBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_eStockBActionPerformed
        //Checks if fields are empty and if not then adds them to a SQL query
        try
        {
            String query = "UPDATE tblPharm SET ";
            int i = 0;
            if(!itemNameT.getText().isEmpty())
            {
                String name = itemNameT.getText();
                query += "ItemName = '"+itemNameT+"',";
            }
            if(!itemDescT.getText().isEmpty())
            {
                query += "itemDescription = '"+itemDescT.getText()+"',";
            }
            if(!sellPriceT.getText().isEmpty())
            {
                if(Double.parseDouble(sellPriceT.getText()) > 0)
                {
                    query += "itemSellPrice = "+M.round(Double.parseDouble(sellPriceT.getText()),2)+",";
                }
                else
                {
                    throw new Exception("The sell price was less than 0");
                }
                
            }
            if(!stockPriceT.getText().isEmpty())
            {
                if(Double.parseDouble(stockPriceT.getText())>0)
                {
                    query += "itemStockPrice = '"+M.round(Double.parseDouble(stockPriceT.getText()),2)+"',";
                }
                else
                {
                    throw new Exception("The Stock price was less than 0");
                }
                
            }
            if(!itemInvT.getText().isEmpty())
            {
                if(Integer.parseInt(itemInvT.getText()) > 0)
                {
                    query += "itemInvent = "+Integer.parseInt(itemInvT.getText())+",";
                }
                else
                {
                    throw new Exception("Item Inventory was less than 0");
                }
            }
            if(!itemSoldT.getText().isEmpty())
            {
                if(Integer.parseInt(itemSoldT.getText()) > 0)
                {  
                    query += "itemSold = "+Integer.parseInt(itemSoldT.getText())+",";
                }
                else
                {
                    throw new Exception("Item Sold was less than 0");
                }
            }
            //Cuts off last value because it will always end with a comma
            query = query.substring(0,query.length() - 1);
            query += " WHERE itemID = "+pharmacyTable.getValueAt(z,0);
            System.out.println(query);
              
            M.executeSQL(query);
            refresh();
              
        }
        catch(Exception ex)
        {
             JOptionPane.showMessageDialog(null,ex,"Error",
                    JOptionPane.ERROR_MESSAGE);      
        }
    }//GEN-LAST:event_eStockBActionPerformed

    private void downBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_downBActionPerformed
        gotoRow(z+1);
        z = z + 1;
    }//GEN-LAST:event_downBActionPerformed

    private void firstBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_firstBActionPerformed
        z = 0;
        gotoRow(0);
    }//GEN-LAST:event_firstBActionPerformed

    private void lastBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_lastBActionPerformed
        System.out.println(x);
        z = x-2;
        gotoRow(x-2);
    }//GEN-LAST:event_lastBActionPerformed

    private void refreshBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshBActionPerformed
        refresh();
    }//GEN-LAST:event_refreshBActionPerformed

    private void dStockBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dStockBActionPerformed
        //Deletes record where the ID equals the currently selected row
        String query = "DELETE FROM tblPharm WHERE itemID = "+pharmacyTable.getValueAt(z,0);
        M.executeSQL(query);
        x = x - 1;
        refresh();
    }//GEN-LAST:event_dStockBActionPerformed

    private void nStockBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nStockBActionPerformed
        try
        {
            String name = itemNameT.getText();
            if(name.isEmpty())
            {
                throw new Exception("No name was entered");
            }
            String desc = itemDescT.getText();
            if(desc.isEmpty())
            {
                throw new Exception("No description was entered");
            }
            Double sellPrice = M.round(Double.parseDouble(sellPriceT.getText()),2);
            Double stockPrice = M.round(Double.parseDouble(stockPriceT.getText()), 2);
            int itemInv = Integer.parseInt(itemInvT.getText());
            int itemSold = Integer.parseInt(itemSoldT.getText());

            if(sellPrice < 0)
            {
                throw new Exception("The sell price was less than 0");
            }
            if(stockPrice < 0)
            {
                throw new Exception("The stock price was less than 0");
            }
            if(itemInv < 0)
            {
                throw new Exception("Item Inventor was less than 0");
            }
            if(itemSold < 0)
            {
                throw new Exception("Item Sold was less than 0");
            }
            String query = "INSERT INTO tblPharm (ItemName,itemDescription,itemSellPrice,itemStockPrice,itemInvent,itemSold) VALUES ("+"'"+name+"','"+desc+"',"+sellPrice+","+stockPrice+","+itemInv+","+itemSold+")";
            System.out.println(query);
            M.executeSQL(query);
            refresh();
        }
        catch(Exception ex)
        {
            JOptionPane.showMessageDialog(null,ex,"Error",
                    JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_nStockBActionPerformed

    private void backBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backBActionPerformed
        main_screen MainSc = new main_screen();
        MainSc.setVisible(true);
        this.setVisible(false);
    }//GEN-LAST:event_backBActionPerformed

    private void toStringBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_toStringBActionPerformed
        int totalProfit = 0;
        String output = "";
        for(int i =0;i < pharmacyTable.getRowCount();i++)
        {
            String name = pharmacyTable.getValueAt(i, 1).toString();
            int stockP = Integer.parseInt(pharmacyTable.getValueAt(i,4).toString());
            int sellP  = Integer.parseInt(pharmacyTable.getValueAt(i,3).toString());
            int amtSold = Integer.parseInt(pharmacyTable.getValueAt(i, 6).toString());
            
            //Calculates the cost to the hostpital by calculating the amount sold * the stocking price
            int purchasePrice = stockP * amtSold;
            //Calcultates the income to the hostpital
            int netIncome = sellP * amtSold;
            //Calculates the profit by taking income - the cost
            int profit = netIncome - purchasePrice;
            
            //Add profit of each item to total
            totalProfit += profit;
            output += "\n\n"+name+":\nThe Amount of units sold: "+amtSold+"\nThe Net Cost: R"+purchasePrice+"\nThe Profit is: R"+profit;
        }
        JOptionPane.showMessageDialog(null,output+"\nTotal Profit: R"+totalProfit, "Financial Statement",JOptionPane.PLAIN_MESSAGE);

    }//GEN-LAST:event_toStringBActionPerformed

    private void helpBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_helpBActionPerformed
        help_screen help = new help_screen();
        help.setVisible(true);
        this.setVisible(false);
    }//GEN-LAST:event_helpBActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(pharmacy_screen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(pharmacy_screen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(pharmacy_screen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(pharmacy_screen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new pharmacy_screen().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton backB;
    private javax.swing.JButton dStockB;
    private javax.swing.JLabel descriptionL;
    private javax.swing.JButton downB;
    private javax.swing.JButton eStockB;
    private javax.swing.JButton firstB;
    private javax.swing.JButton helpB;
    private javax.swing.JLabel inventoryL;
    private javax.swing.JTextField itemDescT;
    private javax.swing.JTextField itemInvT;
    private javax.swing.JTextField itemNameT;
    private javax.swing.JTextField itemSoldT;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton lastB;
    private javax.swing.JButton nStockB;
    private javax.swing.JLabel nameL;
    private javax.swing.JLabel pharmacyL;
    private javax.swing.JTable pharmacyTable;
    private javax.swing.JButton refreshB;
    private javax.swing.JLabel sellL;
    private javax.swing.JTextField sellPriceT;
    private javax.swing.JLabel soldL;
    private javax.swing.JLabel stockPriceL;
    private javax.swing.JTextField stockPriceT;
    private javax.swing.JLabel subTitleL;
    private javax.swing.JLabel titleL;
    private javax.swing.JButton toStringB;
    private javax.swing.JButton upB;
    // End of variables declaration//GEN-END:variables
}
