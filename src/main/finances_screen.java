/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package main;

import java.awt.Color;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Date;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author admin
 */
public class finances_screen extends javax.swing.JFrame {

    /**
     * Creates new form finances_screen
     */
    
    public int x = 0;
    public int z = -1;
    public ResultSet resultSet = null;
    main M = new main();

    
    public finances_screen() {
        initComponents();
        this.getContentPane().setBackground(Color.white);
        refresh();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        financeTable = new javax.swing.JTable();
        aDateL = new javax.swing.JLabel();
        dDateL = new javax.swing.JLabel();
        financeL = new javax.swing.JLabel();
        TcostL = new javax.swing.JLabel();
        hcostL = new javax.swing.JLabel();
        payL = new javax.swing.JLabel();
        paidL = new javax.swing.JLabel();
        adDate = new org.jdesktop.swingx.JXDatePicker();
        disDate = new org.jdesktop.swingx.JXDatePicker();
        treatCostT = new javax.swing.JTextField();
        hospCostT = new javax.swing.JTextField();
        payMD = new javax.swing.JComboBox<>();
        firstB = new javax.swing.JButton();
        lastB = new javax.swing.JButton();
        upB = new javax.swing.JButton();
        downB = new javax.swing.JButton();
        helpB = new javax.swing.JButton();
        refreshB = new javax.swing.JButton();
        financialB = new javax.swing.JButton();
        backB = new javax.swing.JButton();
        nRecordB = new javax.swing.JButton();
        eRecordB = new javax.swing.JButton();
        dRecordB = new javax.swing.JButton();
        paidCB = new javax.swing.JCheckBox();
        titleL = new javax.swing.JLabel();
        subTitleL = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        financeTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "FinID", "AdmitDay", "DisDay", "TreatCost", "StayCost", "PayMethod", "Paid"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.String.class, java.lang.Boolean.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane1.setViewportView(financeTable);

        aDateL.setText("Admittance Date");

        dDateL.setText("Discharge Date");

        financeL.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        financeL.setText("Finances");

        TcostL.setText("Treatment Cost");

        hcostL.setText("Hospitalization Cost");

        payL.setText("Payment Method");

        paidL.setText("Paid");

        payMD.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "EFT", "Credit Card", "Insurance" }));

        firstB.setText("<<");
        firstB.setPreferredSize(new java.awt.Dimension(50, 23));
        firstB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                firstBActionPerformed(evt);
            }
        });

        lastB.setText(">>");
        lastB.setPreferredSize(new java.awt.Dimension(50, 23));
        lastB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lastBActionPerformed(evt);
            }
        });

        upB.setText("<");
        upB.setPreferredSize(new java.awt.Dimension(50, 23));
        upB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                upBActionPerformed(evt);
            }
        });

        downB.setText(">");
        downB.setPreferredSize(new java.awt.Dimension(50, 23));
        downB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                downBActionPerformed(evt);
            }
        });

        helpB.setText("Help");
        helpB.setPreferredSize(new java.awt.Dimension(71, 23));
        helpB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                helpBActionPerformed(evt);
            }
        });

        refreshB.setText("Refresh");
        refreshB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshBActionPerformed(evt);
            }
        });

        financialB.setText("Print Financial Statement");
        financialB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                financialBActionPerformed(evt);
            }
        });

        backB.setText("Back");
        backB.setPreferredSize(new java.awt.Dimension(71, 23));
        backB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backBActionPerformed(evt);
            }
        });

        nRecordB.setText("New Record");
        nRecordB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nRecordBActionPerformed(evt);
            }
        });

        eRecordB.setText("Edit Record");
        eRecordB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                eRecordBActionPerformed(evt);
            }
        });

        dRecordB.setText("Delete Record");
        dRecordB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dRecordBActionPerformed(evt);
            }
        });

        titleL.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        titleL.setText("St John's Hospital");

        subTitleL.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        subTitleL.setText("Administavtive Program");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(133, 133, 133)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(dDateL)
                            .addComponent(aDateL)
                            .addComponent(TcostL)
                            .addComponent(hcostL)
                            .addComponent(payL)
                            .addComponent(paidL))
                        .addGap(18, 18, 18))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(nRecordB)
                        .addGap(34, 34, 34)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(adDate, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(disDate, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(treatCostT)
                        .addComponent(hospCostT)
                        .addComponent(payMD, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(11, 11, 11)
                        .addComponent(eRecordB)
                        .addGap(34, 34, 34)
                        .addComponent(dRecordB))
                    .addComponent(paidCB))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(financialB, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(firstB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(upB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(45, 45, 45)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(downB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lastB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(helpB, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(refreshB, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(backB, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(130, 130, 130))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(640, 640, 640)
                        .addComponent(titleL))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(32, 32, 32)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(financeL)
                                .addGap(547, 547, 547)
                                .addComponent(subTitleL))
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 1131, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(78, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(titleL)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(financeL)
                    .addComponent(subTitleL))
                .addGap(15, 15, 15)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 183, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(34, 34, 34)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(aDateL)
                            .addComponent(adDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(dDateL)
                            .addComponent(disDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(firstB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lastB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(upB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(downB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(TcostL)
                    .addComponent(treatCostT, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(hcostL)
                    .addComponent(hospCostT, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(payL)
                            .addComponent(payMD, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(14, 14, 14)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(paidL)
                            .addComponent(paidCB)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(refreshB)
                        .addGap(20, 20, 20)
                        .addComponent(helpB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(20, 20, 20)
                .addComponent(financialB)
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(nRecordB)
                    .addComponent(eRecordB)
                    .addComponent(dRecordB)
                    .addComponent(backB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(65, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void gotoRow(int row)
    {
        financeTable.setRowSelectionInterval(row, row);
        financeTable.scrollRectToVisible(financeTable.getCellRect(row, 0, true));
        
    }
    
    private void refresh()
    {
        //x is used to track how many records are added to the table
        x = 0;
        try {
            x = x + 1; 
            //Defines column names
            String[] columnNames = {"FinID","AdmitDay","DisDay","TreatCost","StayCost","PayMethod","Paid"};
            DefaultTableModel model = new DefaultTableModel();
            model.setColumnIdentifiers(columnNames);
            financeTable.setModel(model);
            
            String query = "SELECT * FROM tblFinance";
            resultSet = M.refresh(query);
 
 
            //Gets result set and loops through it, adding a row with all relevent data to the table.
            while(resultSet.next()) {
                int finID = resultSet.getInt(1);
                String AdmitDay = resultSet.getString(2).substring(0,10);
                String DisDay = resultSet.getString(3).substring(0, 10);
                int treatCost = resultSet.getInt(4);
                int stayCost = resultSet.getInt(5);
                String paymethod = resultSet.getString(6);
                boolean paid = resultSet.getBoolean(7);

                    
                x = x + 1;
                model.addRow(new Object[] {finID,AdmitDay,DisDay,treatCost,stayCost,paymethod,paid});
            }
              
                    
        }
        catch(SQLException sqlex){
            sqlex.printStackTrace();
        }
        finally {
            try {
                    resultSet.close();
                
            }
            catch (SQLException sqlex) {
                sqlex.printStackTrace();
            }
        }
    }
    
    private void firstBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_firstBActionPerformed

        z = 0;
        gotoRow(0);
    }//GEN-LAST:event_firstBActionPerformed

    private void nRecordBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nRecordBActionPerformed
        //TODO Fix Date Time formating.
        DateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy");
        try
        {
            Date aDate = adDate.getDate();
            String aDatestr = dateFormat.format(aDate);  
            Date dDate = disDate.getDate();
            String dDatestr = dateFormat.format(dDate);
            //checks if admisions date is after discharge date.
            if(M.dateCheck(aDate, dDate) == true)
            {
                throw new Exception("Admistions date cant be after discharge Date");
            }
            int tCost = Integer.parseInt(treatCostT.getText());
            if(tCost < 0)
            {
                throw new Exception("The treatment Cost was less than 0");
            }
            int hCost = Integer.parseInt(hospCostT.getText());
            if(hCost < 0)
            {
                throw new Exception("Hostpital Cost was less than 0");
            }
            Object payM = payMD.getSelectedItem();
            String payMstr = payM.toString();
            boolean paid = paidCB.isSelected();

            String query = "INSERT INTO tblFinance (AdmitDay,DisDay,TreatCost,StayCost,PayMethod,Paid) VALUES ('"+aDatestr+"','"+dDatestr+"',"+tCost+","+hCost+",'"+payMstr+"','"+paid+"')";
            M.executeSQL(query);
            refresh();
        
        }
        catch(Exception ex)
        {
            JOptionPane.showMessageDialog(null,ex,"Error",
                    JOptionPane.ERROR_MESSAGE);
        }
        
    }//GEN-LAST:event_nRecordBActionPerformed

    private void lastBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_lastBActionPerformed
        z = x-2;
        gotoRow(x-2);
    }//GEN-LAST:event_lastBActionPerformed

    private void upBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_upBActionPerformed
        if(z > 0)
        {
            gotoRow(z-1);
            z = z - 1;
        }
    }//GEN-LAST:event_upBActionPerformed

    private void downBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_downBActionPerformed
        gotoRow(z+1);
        z = z + 1;
    }//GEN-LAST:event_downBActionPerformed

    private void refreshBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshBActionPerformed
        refresh();
    }//GEN-LAST:event_refreshBActionPerformed

    private void dRecordBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dRecordBActionPerformed
        String query = "DELETE FROM tblFinance WHERE FinID = "+financeTable.getValueAt(z,0);
        M.executeSQL(query);
        x = x - 1;
        refresh();
    }//GEN-LAST:event_dRecordBActionPerformed

    private void eRecordBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_eRecordBActionPerformed
        //Sets DateFormat
        //TODO do validation checks for the dates
        DateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy");
        try
        {
            String query = "UPDATE tblFinance SET ";
            int i = 0;
            if(adDate.getDate() != null)
            {
                //Gets date and formats it to a string.
                Date aDate = adDate.getDate();
                String aDatestr = dateFormat.format(aDate);
                query += "AdmitDay = '"+aDatestr+"',";
            }
            if(disDate.getDate() != null)
            {
                //Gets date and formats it to a string.
                Date dDate = disDate.getDate();
                String dDatestr = dateFormat.format(dDate);  
                query += "DisDay = '"+dDatestr+"',";
            }
            if(!treatCostT.getText().isEmpty())
            {
                if(Integer.parseInt(treatCostT.getText()) > 0)
                {
                    query += "TreatCost = "+Integer.parseInt(treatCostT.getText())+",";
                }
                else
                {
                    
                }
                
            }
            if(!hospCostT.getText().isEmpty())
            {
                if(Integer.parseInt(hospCostT.getText()) > 0)
                {
                    query += "StayCost = "+Integer.parseInt(hospCostT.getText())+",";
                }
                else
                {
                
                }
            }
            Object payM = payMD.getSelectedItem();
            String payMstr = payM.toString();
            //Checks if selected value is the same as the record in the table
            if(!payMstr.equals(financeTable.getValueAt(z,5)))
            {
                query += "PayMethod = '"+payMstr+"',";
            }
            
            
            boolean paid = paidCB.isSelected();
            //Checks if selected value is the same as the record in the table
            if(!financeTable.getValueAt(z,6).equals(paid))
              {
                query += "Paid = '"+paid+"',";
              }
            query = query.substring(0,query.length() - 1);
            query += " WHERE FinID = "+financeTable.getValueAt(z,0);
            System.out.println(query);
              
            M.executeSQL(query);
            refresh();
              
        }
        catch(Exception ex)
        {
             JOptionPane.showMessageDialog(null,ex,"Error",
                    JOptionPane.ERROR_MESSAGE);       
        }
    }//GEN-LAST:event_eRecordBActionPerformed

    private void backBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backBActionPerformed
        main_screen MainSc = new main_screen();
        MainSc.setVisible(true);
        this.setVisible(false);
    }//GEN-LAST:event_backBActionPerformed

    private void financialBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_financialBActionPerformed
        //If record is paid then it is added to the total of what the hospital has recieved.
        //If not then it adds it to the outstanding total.
        int total = 0;
        int outstanding = 0;
        for(int i = 0;i < financeTable.getRowCount();i++)
        {
            int treatCost = Integer.parseInt(financeTable.getValueAt(i,3).toString());
            int hostpitalCost = Integer.parseInt(financeTable.getValueAt(i,4).toString());
            boolean paid = Boolean.parseBoolean(financeTable.getValueAt(i,6).toString());
            //Checks if the bill has been paid
            if(paid == true)
            {
                //If paid then it adds the cost to a total
                total += treatCost + hostpitalCost;
            }
            else
            {
                //If not then it adds it to the outstandin total
                outstanding += treatCost + hostpitalCost;
            }
        }
        System.out.println("Total Paid "+total);
        System.out.println("Total Outstanding "+outstanding);
        JOptionPane.showMessageDialog(null,"Total Paid: R"+total+"\nTotal Outstanding: R"+outstanding, "Financial Statement",JOptionPane.PLAIN_MESSAGE);
    }//GEN-LAST:event_financialBActionPerformed

    private void helpBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_helpBActionPerformed
        help_screen help = new help_screen();
        help.setVisible(true);
        this.setVisible(false);
    }//GEN-LAST:event_helpBActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(finances_screen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(finances_screen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(finances_screen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(finances_screen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new finances_screen().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel TcostL;
    private javax.swing.JLabel aDateL;
    private org.jdesktop.swingx.JXDatePicker adDate;
    private javax.swing.JButton backB;
    private javax.swing.JLabel dDateL;
    private javax.swing.JButton dRecordB;
    private org.jdesktop.swingx.JXDatePicker disDate;
    private javax.swing.JButton downB;
    private javax.swing.JButton eRecordB;
    private javax.swing.JLabel financeL;
    private javax.swing.JTable financeTable;
    private javax.swing.JButton financialB;
    private javax.swing.JButton firstB;
    private javax.swing.JLabel hcostL;
    private javax.swing.JButton helpB;
    private javax.swing.JTextField hospCostT;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton lastB;
    private javax.swing.JButton nRecordB;
    private javax.swing.JCheckBox paidCB;
    private javax.swing.JLabel paidL;
    private javax.swing.JLabel payL;
    private javax.swing.JComboBox<String> payMD;
    private javax.swing.JButton refreshB;
    private javax.swing.JLabel subTitleL;
    private javax.swing.JLabel titleL;
    private javax.swing.JTextField treatCostT;
    private javax.swing.JButton upB;
    // End of variables declaration//GEN-END:variables
}
